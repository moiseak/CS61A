(define (cadr lst) (car (cdr lst)))

(define (make-kwlist1 keys values)
  (cons keys (list values))
  )

(define (get-keys-kwlist1 kwlist)
  (car kwlist)
  )

(define (get-values-kwlist1 kwlist)
  (cadr kwlist)
  )

(define (make-kwlist2 keys values)
  (if (or (null? keys) (null? values))
    '()
    (cons (list (car keys) (car values))
          (make-kwlist2 (cdr keys) (cdr values)))
    )
  )
(define (get-keys-kwlist2 kwlist)
  (if (null? kwlist)
    '()
    (cons (car (car kwlist)) (get-keys-kwlist2 (cdr kwlist)))
    )
  )

(define (get-values-kwlist2 kwlist)
  (if (null? kwlist)
    '()
    (cons (cadr (car kwlist)) (get-values-kwlist2 (cdr kwlist)))
    )
  )

(define (add-to-kwlist kwlist key value)
  (make-kwlist (append (get-keys-kwlist kwlist) (list key)) (append (get-values-kwlist kwlist) (list value)))
  )

(define (get-first-from-kwlist kwlist key)
  (define keys (get-keys-kwlist kwlist))
  (define vals (get-values-kwlist kwlist))
  (cond
    ((null? keys) nil)
    ((equal? key (car keys)) (car vals))
    (else (get-first-from-kwlist (make-kwlist (cdr keys) (cdr vals)) key))
    )
  )
